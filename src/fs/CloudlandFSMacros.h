// SPDX-License-Identifier: MulanPSL-2.0
/*
    cloudland fs helper macros.

    created on 2024.7.26 at Haidian, Beijing

*/

#pragma once

#include <memory>
#include "../utils/Log.h"


#define CLOUDLAND_FS_IMPL_GET_INSTANCE() \
    FsDriver* FsDriver::getInstance() { \
        if (instanceHolder.get()) { \
            return instanceHolder.get(); \
        } \
        instanceHolder = make_unique<FsDriver>(); \
        if (!instanceHolder.get()) { \
            LOG_ERROR("failed to create instance of FsDriver") \
        } \
        return instanceHolder.get(); \
    }



#define CLOUDLAND_FS_PREPARE_CLASS_HEADER() \
    public: \
        static FsDriver* getInstance(); \
        virtual fuse_operations* getFuseOperations(); 



// generated by gen_macro_CLOUDLAND_FS_PREPARE_CLASS_CPP.py
#define CLOUDLAND_FS_PREPARE_CLASS_CPP() \
    std::unique_ptr<FsDriver> instanceHolder = nullptr; \
    CLOUDLAND_FS_IMPL_GET_INSTANCE() \
    static int __ ## FsDriver ## _GetAttr(const char* path, struct stat* st, fuse_file_info* fi) { \
        auto i = FsDriver::getInstance(); \
        return i->fsGetAttr( \
            path, \
            st, \
            fi\
        ); \
    } \
    static int __ ## FsDriver ## _ReadLink(const char* path, char* buf, size_t size) { \
        auto i = FsDriver::getInstance(); \
        return i->fsReadLink( \
            path, \
            buf, \
            size\
        ); \
    } \
    static int __ ## FsDriver ## _Mkdir(const char* path, mode_t mode) { \
        auto i = FsDriver::getInstance(); \
        return i->fsMkdir( \
            path, \
            mode\
        ); \
    } \
    static int __ ## FsDriver ## _Unlink(const char* path) { \
        auto i = FsDriver::getInstance(); \
        return i->fsUnlink( \
            path\
        ); \
    } \
    static int __ ## FsDriver ## _Rmdir(const char* path) { \
        auto i = FsDriver::getInstance(); \
        return i->fsRmdir( \
            path\
        ); \
    } \
    static int __ ## FsDriver ## _Symlink(const char* from, const char* to) { \
        auto i = FsDriver::getInstance(); \
        return i->fsSymlink( \
            from, \
            to\
        ); \
    } \
    static int __ ## FsDriver ## _Rename(const char* from, const char* to, unsigned int flags) { \
        auto i = FsDriver::getInstance(); \
        return i->fsRename( \
            from, \
            to, \
            flags\
        ); \
    } \
    static int __ ## FsDriver ## _Link(const char* from, const char* to) { \
        auto i = FsDriver::getInstance(); \
        return i->fsLink( \
            from, \
            to\
        ); \
    } \
    static int __ ## FsDriver ## _Truncate(const char* path, off_t size, fuse_file_info* fi) { \
        auto i = FsDriver::getInstance(); \
        return i->fsTruncate( \
            path, \
            size, \
            fi\
        ); \
    } \
    static int __ ## FsDriver ## _Open(const char* path, fuse_file_info* fi) { \
        auto i = FsDriver::getInstance(); \
        return i->fsOpen( \
            path, \
            fi\
        ); \
    } \
    static int __ ## FsDriver ## _Read(const char* path, char* buf, size_t size, off_t offset, fuse_file_info* fi) { \
        auto i = FsDriver::getInstance(); \
        return i->fsRead( \
            path, \
            buf, \
            size, \
            offset, \
            fi\
        ); \
    } \
    static int __ ## FsDriver ## _Write(const char* path, const char* buf, size_t size, off_t offset, fuse_file_info* fi) { \
        auto i = FsDriver::getInstance(); \
        return i->fsWrite( \
            path, \
            buf, \
            size, \
            offset, \
            fi\
        ); \
    } \
    static int __ ## FsDriver ## _Statfs(const char* path, struct statvfs* stbuf) { \
        auto i = FsDriver::getInstance(); \
        return i->fsStatfs( \
            path, \
            stbuf\
        ); \
    } \
    static int __ ## FsDriver ## _SetXAttr(const char* path, const char* name, const char* value, size_t size, int flags) { \
        auto i = FsDriver::getInstance(); \
        return i->fsSetXAttr( \
            path, \
            name, \
            value, \
            size, \
            flags\
        ); \
    } \
    static int __ ## FsDriver ## _GetXAttr(const char* path, const char* name, char* value, size_t size) { \
        auto i = FsDriver::getInstance(); \
        return i->fsGetXAttr( \
            path, \
            name, \
            value, \
            size\
        ); \
    } \
    static int __ ## FsDriver ## _ListXAttr(const char* path, char* list, size_t size) { \
        auto i = FsDriver::getInstance(); \
        return i->fsListXAttr( \
            path, \
            list, \
            size\
        ); \
    } \
    static int __ ## FsDriver ## _OpenDir(const char* path, fuse_file_info* fi) { \
        auto i = FsDriver::getInstance(); \
        return i->fsOpenDir( \
            path, \
            fi\
        ); \
    } \
    static int __ ## FsDriver ## _ReadDir( const char* path,void* buf,fuse_fill_dir_t filler,off_t offset,fuse_file_info* fi,fuse_readdir_flags flags) { \
        auto i = FsDriver::getInstance(); \
        return i->fsReadDir( \
            path, \
            buf, \
            filler, \
            offset, \
            fi, \
            flags\
        ); \
    } \
    static int __ ## FsDriver ## _ReleaseDir(const char* path, fuse_file_info* fi) { \
        auto i = FsDriver::getInstance(); \
        return i->fsReleaseDir( \
            path, \
            fi\
        ); \
    } \
    static void* __ ## FsDriver ## _Init(fuse_conn_info* conn, fuse_config* cfg) { \
        auto i = FsDriver::getInstance(); \
        return i->fsInit( \
            conn, \
            cfg\
        ); \
    } \
    static void __ ## FsDriver ## _Destroy(void* privateData) { \
        auto i = FsDriver::getInstance(); \
        return i->fsDestroy( \
            privateData\
        ); \
    } \
    static int __ ## FsDriver ## _Access(const char* path, int mask) { \
        auto i = FsDriver::getInstance(); \
        return i->fsAccess( \
            path, \
            mask\
        ); \
    } \
    static int __ ## FsDriver ## _Create(const char* path, mode_t mode, fuse_file_info* fi) { \
        auto i = FsDriver::getInstance(); \
        return i->fsCreate( \
            path, \
            mode, \
            fi\
        ); \
    } \
static fuse_operations fuseOperations = { \
    .getattr = __ ## FsDriver ## _GetAttr, \
    .readlink = __ ## FsDriver ## _ReadLink, \
    .mknod = nullptr, \
    .mkdir = __ ## FsDriver ## _Mkdir, \
    .unlink = __ ## FsDriver ## _Unlink, \
    .rmdir = __ ## FsDriver ## _Rmdir, \
    .symlink = __ ## FsDriver ## _Symlink, \
    .rename = __ ## FsDriver ## _Rename, \
    .link = __ ## FsDriver ## _Link, \
    .chmod = nullptr, \
    .chown = nullptr, \
    .truncate = __ ## FsDriver ## _Truncate, \
    .open = __ ## FsDriver ## _Open, \
    .read = __ ## FsDriver ## _Read, \
    .write = __ ## FsDriver ## _Write, \
    .statfs = __ ## FsDriver ## _Statfs, \
    .flush = nullptr, \
    .release = nullptr, \
    .fsync = nullptr, \
    .setxattr = __ ## FsDriver ## _SetXAttr, \
    .getxattr = __ ## FsDriver ## _GetXAttr, \
    .listxattr = __ ## FsDriver ## _ListXAttr, \
    .removexattr = nullptr, \
    .opendir = __ ## FsDriver ## _OpenDir, \
    .readdir = __ ## FsDriver ## _ReadDir, \
    .releasedir = __ ## FsDriver ## _ReleaseDir, \
    .fsyncdir = nullptr, \
    .init = __ ## FsDriver ## _Init, \
    .destroy = __ ## FsDriver ## _Destroy, \
    .access = __ ## FsDriver ## _Access, \
    .create = __ ## FsDriver ## _Create, \
    .lock = nullptr, \
    .utimens = nullptr, \
    .bmap = nullptr, \
    .ioctl = nullptr, \
    .poll = nullptr, \
    .write_buf = nullptr, \
    .read_buf = nullptr, \
    .flock = nullptr, \
    .fallocate = nullptr, \
    .copy_file_range = nullptr, \
    .lseek = nullptr \
}; \
fuse_operations* FsDriver::getFuseOperations() { \
    return &fuseOperations; \
}
// end of generated code.







