// SPDX-License-Identifier: MulanPSL-2.0
/*
    cloudland fs driver.

    created on 2024.7.25 at Haidian, Beijing

*/

#pragma once

#include <fuse3/fuse.h>


namespace cloudland {
namespace fs {


class Base {
public:
    virtual int fsGetAttr(const char* path, struct stat* st, fuse_file_info* fi);
    virtual int fsReadLink(const char* path, char* buf, size_t size);
    virtual int fsMkdir(const char* path, mode_t mode);
    virtual int fsUnlink(const char* path);
    virtual int fsRmdir(const char* path);
    virtual int fsSymlink(const char* from, const char* to);
    virtual int fsRename(const char* from, const char* to, unsigned int flags);
    virtual int fsLink(const char* from, const char* to);
    virtual int fsTruncate(const char* path, off_t size, fuse_file_info* fi);
    virtual int fsOpen(const char* path, fuse_file_info* fi);
    virtual int fsRead(const char* path, char* buf, size_t size, off_t offset, fuse_file_info* fi);
    virtual int fsWrite(const char* path, const char* buf, size_t size, off_t offset, fuse_file_info* fi);
    virtual int fsStatfs(const char* path, struct statvfs* stbuf);
    virtual int fsSetXAttr(const char* path, const char* name, const char* value, size_t size, int flags);
    virtual int fsGetXAttr(const char*, const char*, char*, size_t);
    virtual int fsListXAttr(const char*, char*, size_t);
    virtual int fsOpenDir(const char*, fuse_file_info* fi);
    virtual int fsReadDir(
        const char* path, 
        void* buf, 
        fuse_fill_dir_t filler, 
        off_t offset, 
        fuse_file_info* fi, 
        fuse_readdir_flags flags
    );
    virtual void* fsInit(fuse_conn_info* conn, fuse_config* cfg);
    virtual void fsDestroy(void* privateData);
    virtual int fsAccess(const char* path, int mask);
    virtual int fsCreate(const char* path, mode_t mode, fuse_file_info* fi);


public:
    static Base* getInstance();



protected:
    static Base* instance;


};




#define CLOUDLAND_FS_DECL_GET_INSTANCE(Class) \
    static Base* getInstance();


#define CLOUDLAND_FS_IMPL_GET_INSTANCE(Class) \
    Base* Class::getInstance() { \
        if (instance) { \
            return instance; \
        } \
        instance = new Class; \
        if (!instance) { \
            LOG_ERROR("failed to create instance of ", #Class) \
        } \
        return instance; \
    }



#define CLOUDLAND_FS_PREPARE_CLASS_HEADER() \
    extern fuse_operations fuseOperations;



// generated by gen_macro_CLOUDLAND_FS_PREPARE_CLASS_CPP.py
#define CLOUDLAND_FS_PREPARE_CLASS_CPP(Class) \
    CLOUDLAND_FS_IMPL_GET_INSTANCE(Class) \
    static int __ ## Class ## _GetAttr(const char* path, struct stat* st, fuse_file_info* fi) { \
        auto i = Class::getInstance(); \
        return i->fsGetAttr( \
            path, \
            st, \
            fi\
        ) \
    } \
    static int __ ## Class ## _ReadLink(const char* path, char* buf, size_t size) { \
        auto i = Class::getInstance(); \
        return i->fsReadLink( \
            path, \
            buf, \
            size\
        ) \
    } \
    static int __ ## Class ## _Mkdir(const char* path, mode_t mode) { \
        auto i = Class::getInstance(); \
        return i->fsMkdir( \
            path, \
            mode\
        ) \
    } \
    static int __ ## Class ## _Unlink(const char* path) { \
        auto i = Class::getInstance(); \
        return i->fsUnlink( \
            path\
        ) \
    } \
    static int __ ## Class ## _Rmdir(const char* path) { \
        auto i = Class::getInstance(); \
        return i->fsRmdir( \
            path\
        ) \
    } \
    static int __ ## Class ## _Symlink(const char* from, const char* to) { \
        auto i = Class::getInstance(); \
        return i->fsSymlink( \
            from, \
            to\
        ) \
    } \
    static int __ ## Class ## _Rename(const char* from, const char* to, unsigned int flags) { \
        auto i = Class::getInstance(); \
        return i->fsRename( \
            from, \
            to, \
            flags\
        ) \
    } \
    static int __ ## Class ## _Link(const char* from, const char* to) { \
        auto i = Class::getInstance(); \
        return i->fsLink( \
            from, \
            to\
        ) \
    } \
    static int __ ## Class ## _Truncate(const char* path, off_t size, fuse_file_info* fi) { \
        auto i = Class::getInstance(); \
        return i->fsTruncate( \
            path, \
            size, \
            fi\
        ) \
    } \
    static int __ ## Class ## _Open(const char* path, fuse_file_info* fi) { \
        auto i = Class::getInstance(); \
        return i->fsOpen( \
            path, \
            fi\
        ) \
    } \
    static int __ ## Class ## _Read(const char* path, char* buf, size_t size, off_t offset, fuse_file_info* fi) { \
        auto i = Class::getInstance(); \
        return i->fsRead( \
            path, \
            buf, \
            size, \
            offset, \
            fi\
        ) \
    } \
    static int __ ## Class ## _Write(const char* path, const char* buf, size_t size, off_t offset, fuse_file_info* fi) { \
        auto i = Class::getInstance(); \
        return i->fsWrite( \
            path, \
            buf, \
            size, \
            offset, \
            fi\
        ) \
    } \
    static int __ ## Class ## _Statfs(const char* path, struct statvfs* stbuf) { \
        auto i = Class::getInstance(); \
        return i->fsStatfs( \
            path, \
            stbuf\
        ) \
    } \
    static int __ ## Class ## _SetXAttr(const char* path, const char* name, const char* value, size_t size, int flags) { \
        auto i = Class::getInstance(); \
        return i->fsSetXAttr( \
            path, \
            name, \
            value, \
            size, \
            flags\
        ) \
    } \
    static int __ ## Class ## _GetXAttr(const char*, const char*, char*, size_t) { \
        auto i = Class::getInstance(); \
        return i->fsGetXAttr( \
            char*, \
            char*, \
            char*, \
            size_t\
        ) \
    } \
    static int __ ## Class ## _ListXAttr(const char*, char*, size_t) { \
        auto i = Class::getInstance(); \
        return i->fsListXAttr( \
            char*, \
            char*, \
            size_t\
        ) \
    } \
    static int __ ## Class ## _OpenDir(const char*, fuse_file_info* fi) { \
        auto i = Class::getInstance(); \
        return i->fsOpenDir( \
            char*, \
            fi\
        ) \
    } \
    static int __ ## Class ## _ReadDir( const char* path,void* buf,fuse_fill_dir_t filler,off_t offset,fuse_file_info* fi,fuse_readdir_flags flags) { \
        auto i = Class::getInstance(); \
        return i->fsReadDir( \
            path, \
            buf, \
            filler, \
            offset, \
            fi, \
            flags\
        ) \
    } \
    static void* __ ## Class ## _Init(fuse_conn_info* conn, fuse_config* cfg) { \
        auto i = Class::getInstance(); \
        return i->fsInit( \
            conn, \
            cfg\
        ) \
    } \
    static void __ ## Class ## _Destroy(void* privateData) { \
        auto i = Class::getInstance(); \
        return i->fsDestroy( \
            privateData\
        ) \
    } \
    static int __ ## Class ## _Access(const char* path, int mask) { \
        auto i = Class::getInstance(); \
        return i->fsAccess( \
            path, \
            mask\
        ) \
    } \
    static int __ ## Class ## _Create(const char* path, mode_t mode, fuse_file_info* fi) { \
        auto i = Class::getInstance(); \
        return i->fsCreate( \
            path, \
            mode, \
            fi\
        ) \
    } \
fuse_operations fuseOperations = { \
    .getattr = __ ## Class ## _GetAttr, \
    .readlink = __ ## Class ## _ReadLink, \
    .mknod = nullptr, \
    .mkdir = __ ## Class ## _Mkdir, \
    .unlink = __ ## Class ## _Unlink, \
    .rmdir = __ ## Class ## _Rmdir, \
    .symlink = __ ## Class ## _Symlink, \
    .rename = __ ## Class ## _Rename, \
    .link = __ ## Class ## _Link, \
    .chmod = nullptr, \
    .chown = nullptr, \
    .truncate = __ ## Class ## _Truncate, \
    .open = __ ## Class ## _Open, \
    .read = __ ## Class ## _Read, \
    .write = __ ## Class ## _Write, \
    .statfs = __ ## Class ## _Statfs, \
    .flush = nullptr, \
    .release = nullptr, \
    .fsync = nullptr, \
    .setxattr = __ ## Class ## _SetXAttr, \
    .getxattr = __ ## Class ## _GetXAttr, \
    .listxattr = __ ## Class ## _ListXAttr, \
    .removexattr = nullptr, \
    .opendir = __ ## Class ## _OpenDir, \
    .readdir = __ ## Class ## _ReadDir, \
    .releasedir = nullptr, \
    .fsyncdir = nullptr, \
    .init = __ ## Class ## _Init, \
    .destroy = __ ## Class ## _Destroy, \
    .access = __ ## Class ## _Access, \
    .create = __ ## Class ## _Create, \
    .lock = nullptr, \
    .utimens = nullptr, \
    .bmap = nullptr, \
    .ioctl = nullptr, \
    .poll = nullptr, \
    .write_buf = nullptr, \
    .read_buf = nullptr, \
    .flock = nullptr, \
    .fallocate = nullptr, \
    .copy_file_range = nullptr, \
    .lseek = nullptr \
}
// end of generated code.




} // namespace fs
} // namespace cloudland
